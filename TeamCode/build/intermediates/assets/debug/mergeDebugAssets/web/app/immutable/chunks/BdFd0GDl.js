var G=Object.defineProperty;var W=o=>{throw TypeError(o)};var K=(o,e,t)=>e in o?G(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var d=(o,e,t)=>K(o,typeof e!="symbol"?e+"":e,t),X=(o,e,t)=>e.has(o)||W("Cannot "+t);var l=(o,e,t)=>(X(o,e,"read from private field"),t?t.call(o):e.get(o)),g=(o,e,t)=>e.has(o)?W("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(o):e.set(o,t);import{aU as Y,aT as w,ap as k,x as p,a9 as f,ab as Q}from"./CPE_FGaW.js";import"./Dqm9uXNb.js";import{g as j}from"./BQmuxnkq.js";import"./Bzak7iHL.js";const Z=Y;class B{constructor(e,t){d(this,"id");d(this,"socket");this.id=e,this.socket=t}addMessageHandler(e,t){this.socket.addMessageHandler(this.id,e,t)}sendMessage(e,t){this.socket.sendMessage({pluginID:this.id,messageID:e,data:t})}removeMessageHandler(e,t){this.socket.removeMessageHandler(this.id,e)}}async function J(o){const e=new Blob([o],{type:"text/javascript"}),t=URL.createObjectURL(e),i=await import(t);return URL.revokeObjectURL(t),i}class H{constructor(){d(this,"socket",null);d(this,"messageHandlers",{});d(this,"pluginManagers",{});d(this,"pluginSelectors",{});d(this,"log",[]);d(this,"maxLogSize",100);d(this,"maxQueueSize",256);d(this,"outgoingQueue",[]);d(this,"isDraining",!1)}async initPlugins(e,t,i){const s={};await Promise.all(e.map(async a=>{try{const n=await J(t[a.details.id]),r=n==null?void 0:n.default;this.pluginSelectors[a.details.id]=r;const m=r("Manager"),c=new m(new B(a.details.id,this),a.details,a.config,i);s[a.details.id]=c,typeof c.onInit=="function"&&await c.onInit()}catch(n){console.error(`[plugin:${a.details.id}] Failed to initialize`,n)}})),this.pluginManagers={...this.pluginManagers,...s}}async initSocket(e){this.log=[];const t=window.location.hostname,s=`${window.location.protocol==="https:"?"wss":"ws"}://${t}:8002`,a=new WebSocket(s);this.socket=a,await new Promise((n,r)=>{const m=()=>{console.log("WebSocket connection opened:",s),h(),n()},c=u=>{console.error("WebSocket error:",u),h(),e(),r(u)},h=()=>{a.removeEventListener("open",m),a.removeEventListener("error",c)};a.addEventListener("open",m),a.addEventListener("error",c)}),a.addEventListener("open",()=>{this.drainQueue()}),this.drainQueue(),a.addEventListener("message",n=>{this.log=[...this.log,n.data].slice(-this.maxLogSize);try{const r=JSON.parse(n.data);console.log(r.pluginID,r.messageID,r.data),this.handleMessage(r.pluginID,r.messageID,r.data)}catch(r){console.error("Failed to parse message:",r,n.data)}}),a.addEventListener("error",n=>{console.error("WebSocket error:",n),e()}),a.addEventListener("close",()=>{console.log("WebSocket connection closed"),e()})}close(){var e;(e=this.socket)==null||e.close()}handleMessage(e,t,i){const s=this.messageHandlers[`${e}-${t}`];s?s(i):console.warn(`No handler for message kind: ${e}-${t}`)}addMessageHandler(e,t,i){this.messageHandlers[`${e}-${t}`]=i}sendMessage(e){const t=JSON.stringify(e);this.outgoingQueue.length>=this.maxQueueSize&&(console.warn("Outgoing queue full. Dropping oldest message."),this.outgoingQueue.shift()),this.outgoingQueue.push(t),this.drainQueue()}clearQueue(){this.outgoingQueue.length=0}drainQueue(){if(!this.isDraining&&!(!this.socket||this.socket.readyState!==WebSocket.OPEN)){this.isDraining=!0;try{for(;this.socket&&this.socket.readyState===WebSocket.OPEN&&this.outgoingQueue.length>0;){const e=this.outgoingQueue.shift();try{this.socket.send(e)}catch(t){this.outgoingQueue.unshift(e),console.error("Send failed; will retry later.",t);break}}}finally{this.isDraining=!1}}}removeMessageHandler(e,t){delete this.messageHandlers[`${e}-${t}`]}}class _{constructor(){d(this,"data",[]);d(this,"callbacks",[])}onUpdate(e){this.callbacks.push(e)}sendUpdate(){for(const e of this.callbacks)e(this.data)}add(e){this.data.push({id:j(),timestamp:Date.now(),text:e,executedAction:!1,actions:[]}),this.sendUpdate()}addAction(e,t){const i=j();this.data.push({id:i,timestamp:Date.now(),text:e,executedAction:!1,actions:t.map(s=>({text:s.text,task:()=>{s.task();for(const a of this.data)a.id==i&&(a.executedAction=!0,this.sendUpdate())}}))}),this.sendUpdate()}}const ee={id:"com.bylazar.pluginsjscore",name:"Plugins JS Core",letterName:"PJC",description:"Plugins Javascript Core",websiteURL:"https://panels.bylazar.com",mavenURL:"",packageString:"",version:"1.1.38",pluginsCoreVersion:"1.1.38",author:"Lazar",manager:"",components:[],templates:[],includedPluginsIDs:[],changelog:[{version:"1.1.38",release_date:"26.08.2025",changes:[{type:"added",description:"Added generic functions to fetch latest versions from GitHub hosted mavens",upgrading:""}]},{version:"1.1.37",release_date:"25.08.2025",changes:[{type:"fixed",description:"Fixed docs handling of URL special characters for selected link",upgrading:""},{type:"fixed",description:"Fixed JS Core plugin config versions",upgrading:""}]},{version:"1.1.36",release_date:"25.08.2025",changes:[{type:"fixed",description:"Fixed minor docs shared UI logic",upgrading:""}]}]},z={isEnabled:!0,isDev:!1};async function te(o){return await se("lazarcloud","ftcontrol-maven","releases",o)}async function se(o,e,t,i){var s;try{const a=await fetch(`https://raw.githubusercontent.com/${o}/${e}/refs/heads/main/${t}/${i.replaceAll(".","/")}/maven-metadata.xml`);if(!a.ok)throw new Error(`HTTP ${a.status}`);const n=await a.text();return((s=new DOMParser().parseFromString(n,"application/xml").querySelector("latest"))==null?void 0:s.textContent)||""}catch{return""}}const ie="PanelsDB",S="PluginData",ne=1;async function q(){return new Promise((o,e)=>{const t=indexedDB.open(ie,ne);t.onupgradeneeded=()=>{const i=t.result;i.objectStoreNames.contains(S)||i.createObjectStore(S)},t.onsuccess=()=>o(t.result),t.onerror=()=>e(t.error)})}async function A(o,e){const t=await q();return new Promise((i,s)=>{const r=t.transaction(S,"readwrite").objectStore(S).put(e,o);r.onsuccess=()=>i(!0),r.onerror=()=>s(r.error)})}async function F(o){const e=await q();return new Promise((t,i)=>{const n=e.transaction(S,"readonly").objectStore(S).get(o);n.onsuccess=()=>t(n.result??null),n.onerror=()=>i(n.error)})}const U={id:"com.bylazar.panels",name:"Panels",letterName:"P",description:"Empty Panels Installation ready to be extended",websiteURL:"https://panels.bylazar.com",mavenURL:"https://mymaven.bylazar.com/releases",packageString:"com.bylazar:panels:<VERSION>",version:"1.0.0",pluginsCoreVersion:"1.1.38",author:"Lazar",manager:"",components:[],templates:[],includedPluginsIDs:[],changelog:[{version:"1.0.0",release_date:"26.08.2025",changes:[{type:"other",description:"First release",upgrading:""}]}]};class ae{constructor(){d(this,"config",U);d(this,"settings",z)}onInit(){}static async getNewVersion(){return await te(U.id)}}var D,P,b,I,x,M,$,T,L,R,C,E,V;class oe{constructor(){g(this,D,w(k([])));g(this,P,w(k([])));d(this,"notificationsManager",new _);g(this,b,Q(()=>{let e=[];for(const t of this.plugins)for(const i of t.details.templates){const s=new Set([]),a=new Set(this.plugins.map(r=>r.details.id));for(const r of i.widgets)for(const m of r.widgets)s.add(m.pluginID);for(const r of i.navlets)s.add(r.pluginID);const n=Array.from(s).filter(r=>!a.has(r));e.push({...i,pluginID:t.details.id,missingPlugins:n})}return e}));g(this,I,w(k([])));d(this,"socket",new H);g(this,x,w(!1));d(this,"updateInterval",null);d(this,"interval",null);g(this,M,w(k({})));g(this,$,w(k({})));g(this,T,w(k({})));g(this,L,w(k({})));g(this,R,Q(()=>{if(!this.isConnected)return!1;for(const e of this.plugins)for(const t of e.details.templates)if(!this.pluginsTemplatesPreviews[`${e.details.id}/${t.name}`])return!1;return!0}));g(this,C,w(k([])));g(this,E,w(!1));g(this,V,w(!1))}get plugins(){return p(l(this,D))}set plugins(e){f(l(this,D),e,!0)}get notifications(){return p(l(this,P))}set notifications(e){f(l(this,P),e,!0)}get allTemplates(){return p(l(this,b))}set allTemplates(e){f(l(this,b),e)}get skippedPlugins(){return p(l(this,I))}set skippedPlugins(e){f(l(this,I),e,!0)}get isConnected(){return p(l(this,x))}set isConnected(e){f(l(this,x),e,!0)}get reloadIndexes(){return p(l(this,M))}set reloadIndexes(e){f(l(this,M),e,!0)}get lastVersionNotificationTime(){return p(l(this,$))}set lastVersionNotificationTime(e){f(l(this,$),e,!0)}get changedTimestamps(){return p(l(this,T))}set changedTimestamps(e){f(l(this,T),e,!0)}get pluginsTemplatesPreviews(){return p(l(this,L))}set pluginsTemplatesPreviews(e){f(l(this,L),e,!0)}get isPrepared(){return p(l(this,R))}set isPrepared(e){f(l(this,R),e)}get devPlugins(){return p(l(this,C))}set devPlugins(e){f(l(this,C),e,!0)}get hasDevServer(){return p(l(this,E))}set hasDevServer(e){f(l(this,E),e,!0)}createDevServerInterval(){this.interval!==null&&clearInterval(this.interval),this.interval=setInterval(async()=>{await this.updateDevPlugins(!0)},this.hasDevServer?500:1e4)}async updateDevPlugins(e=!1){var i;let t;try{t=await(await this.fetchWithRetry("http://localhost:3001/plugins",{},1)).json(),this.hasDevServer||this.createDevServerInterval(),this.hasDevServer=!0}catch(s){console.error("Failed to fetch live plugins:",s),this.hasDevServer&&this.createDevServerInterval(),this.hasDevServer=!1;return}for(const s of t)if(this.devPlugins.includes(s.id)||this.devPlugins.push(s.id),s.lastChanged!=this.changedTimestamps[s.id]){console.log("Rebuilding",s.name);let n=await(await this.fetchWithRetry(`http://localhost:3001/plugins/${s.id}`,{},1)).json(),m=await(await this.fetchWithRetry(`http://localhost:3001/plugins/${s.id}/svelte.js`,{},1)).text();const{default:c}=await J(m||"");this.socket.pluginSelectors[n.id]=c;let h=structuredClone(z);for(const u of this.plugins)u.details.id==s.id&&(h=u.config);if(e){const u=c("Manager"),y=this.socket.pluginManagers[n.id].state.data;this.socket.pluginManagers[n.id]=new u(new B(n.id,this.socket),n,h,this.notificationsManager),this.socket.pluginManagers[n.id].state.data=y;for(const v of Object.values(this.socket.pluginManagers[n.id].state.data))for(const O of v.callbacks)O(v.value);(i=this.socket.pluginManagers[n.id])==null||i.onInit()}for(const u of n.templates){const y=`${s.id}/${u.name}`;delete this.pluginsTemplatesPreviews[y]}for(const u of this.plugins)u.details.id==s.id&&(u.details=n);this.reloadIndexes[n.id]++,console.log("Reloaded plugin",s.id),this.changedTimestamps[s.id]=s.lastChanged,this.socket.sendMessage({pluginID:"core",messageID:"pluginReloaded",data:n.id})}}async hasInternetConnection(){try{return(await fetch("https://raw.githubusercontent.com/lazarcloud/ftcontrol-maven/refs/heads/main/dev/com/bylazar/panels/maven-metadata.xml",{cache:"no-cache"})).ok}catch{return!1}}get wasSocketOpened(){return p(l(this,V))}set wasSocketOpened(e){f(l(this,V),e,!0)}async init(e=!0){try{e&&(this.plugins=[],this.hasDevServer=!1,this.updateInterval!==null&&clearInterval(this.updateInterval),this.interval!==null&&clearInterval(this.interval),this.notificationsManager=new _,this.skippedPlugins=[],this.socket=new H),this.notificationsManager.callbacks=[],this.notificationsManager.onUpdate(c=>{this.notifications=c}),this.notifications=this.notificationsManager.data,this.isConnected=!1;const t=Date.now();console.log("[init] Starting initialization...");const i=await this.getPlugins();this.plugins=i.data.plugins,this.wasSocketOpened&&location.reload(),this.plugins.forEach(c=>{this.reloadIndexes[c.details.id]=0,this.changedTimestamps[c.details.id]=-1,this.lastVersionNotificationTime[c.details.id]=-1}),console.log(`[init] Loaded ${this.plugins.length} plugins`),this.plugins.forEach(c=>{this.reloadIndexes[c.details.id]++,this.changedTimestamps[c.details.id]=0,this.lastVersionNotificationTime[c.details.id]=0}),this.skippedPlugins=i.data.skippedPlugins,console.log(`[init] Skipped ${this.skippedPlugins.length} plugins`);const s=Date.now();this.interval!==null&&clearInterval(this.interval);const a=Z?"http://localhost:8001/":"/",n={},m=await(await fetch(`${a}api/shas`)).json();await Promise.all(this.plugins.map(async c=>{const h=c.details.id;let u=m[h]??"",y=!0;if(u!=="")try{const v=await F(`${h}_sha`);u===v&&(n[h]=await F(`${h}_data`)??"",y=!1)}catch{}if(y)try{const N=(await(await fetch(`${a}api/svelte/${h}`)).text()||"").trim();if(!N){console.warn(`[plugin:${h}] Missing manager source`);return}await Promise.all([A(`${h}_data`,N),A(`${h}_sha`,u)]),n[h]=N}catch(v){console.warn(`[plugin:${h}] Failed to refresh`,v)}})),await this.socket.initPlugins(this.plugins,n,this.notificationsManager);try{await this.updateDevPlugins(!0)}catch{}this.plugins.push({details:U,config:z}),this.plugins.push({details:ee,config:z}),this.socket.pluginManagers["com.bylazar.panels"]=new ae,setTimeout(()=>{this.createDevServerInterval(),console.log("[init] Dev plugin interval set up")},100),await this.socket.initSocket(async()=>{this.notificationsManager.add("Lost connection to robot"),await this.init(!1)}),console.log(`[init] socket.init() took ${Date.now()-s}ms`),this.isConnected=!0,this.wasSocketOpened=!0,this.updateInterval!==null&&clearInterval(this.updateInterval),this.updateInterval=setInterval(async()=>{await this.hasInternetConnection()&&(console.log("Has internet"),await this.checkVersions())},1e4),console.log(`[init] Initialization complete in ${Date.now()-t}ms`),this.plugins.map(c=>c.details.id).includes("com.bylazar.exampleplugin")&&this.notificationsManager.addAction("Don't use default plugin id",[{text:"OK",task:()=>{}},{text:"Details",task:()=>{}}])}catch(t){console.error("[init] Error during initialization:",t),await this.waitTwoSeconds(),await this.init(e)}}waitTwoSeconds(){return new Promise(e=>{setTimeout(()=>{e("Done waiting 2 seconds!")},2e3)})}close(){this.isConnected=!1,this.interval&&clearInterval(this.interval),this.socket.close()}fetchWithTimeout(e,t={},i=5e3){const s=new AbortController,a=setTimeout(()=>s.abort(),i);return fetch(e,{...t,signal:s.signal}).finally(()=>clearTimeout(a))}fetchWithRetry(e,t={},i=3,s=1e3,a=250){return this.fetchWithTimeout(e,t,s).catch(n=>{if(i>0)return console.warn(`Retrying... (${i} left), Error: ${n.message}`),new Promise(r=>setTimeout(r,a)).then(()=>this.fetchWithRetry(e,t,i-1,s,a*2));throw n})}async getSha(e=0){if(e>5)throw Error("Tried too many times.");const t=window.location.origin;try{const s=await(await this.fetchWithRetry(`${t}/api/sha256`,{})).text();return s&&s.trim()!="null"?s:this.getSha(e+1)}catch(i){throw console.warn("Fetch failed, retrying...",i),i}}async getPlugins(){const e=window.location.origin;return await(await this.fetchWithRetry(`${e}/api/plugins`,{},5,4e3,500)).json()}async checkVersions(){const e=new Set;for(const t of this.plugins){const i=t.details.includedPluginsIDs;for(const s of i)e.add(s)}for(const t of this.plugins)try{const i=t.details.id,s=this.lastVersionNotificationTime[i]??0;if(Date.now()-s<900*1e3||e.has(i))continue;const a=this.socket.pluginManagers[i];console.log("Checking plugin version",i,a.config.version);const n=await a.constructor.getNewVersion();let r=n!=a.config.version;n==""&&(r=!1),n!=""&&(this.lastVersionNotificationTime[i]=Date.now()),r?this.notificationsManager.addAction(`Plugin ${i} has a new version: ${n}`,[{text:"Check Website",task:()=>{window.open(t.details.websiteURL,"_blank")}},{text:"Remind me later",task:()=>{}}]):console.log(`Plugin ${i} is latest`)}catch(i){console.error(i)}}}D=new WeakMap,P=new WeakMap,b=new WeakMap,I=new WeakMap,x=new WeakMap,M=new WeakMap,$=new WeakMap,T=new WeakMap,L=new WeakMap,R=new WeakMap,C=new WeakMap,E=new WeakMap,V=new WeakMap;const ue=new oe;export{ue as g};
